/*----- PROTECTED REGION ID(CalendarClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        CalendarClass.cpp
//
// description : C++ source for the CalendarClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the Calendar once per process.
//
// project :     Calendar
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CalendarClass.h>

/*----- PROTECTED REGION END -----*/	//	CalendarClass.cpp

//-------------------------------------------------------------------
/**
 *	Create CalendarClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Calendar_class(const char *name) {
		return Calendar_ns::CalendarClass::init(name);
	}
}

namespace Calendar_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
CalendarClass *CalendarClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		CalendarClass::CalendarClass(string &s)
 * description : 	constructor for the CalendarClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
CalendarClass::CalendarClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering CalendarClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(CalendarClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::constructor

	cout2 << "Leaving CalendarClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		CalendarClass::~CalendarClass()
 * description : 	destructor for the CalendarClass
 */
//--------------------------------------------------------
CalendarClass::~CalendarClass()
{
	/*----- PROTECTED REGION ID(CalendarClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		CalendarClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
CalendarClass *CalendarClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new CalendarClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		CalendarClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
CalendarClass *CalendarClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		LoadActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadActivitiesClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadActivitiesClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<Calendar *>(device))->load_activities(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ExportActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ExportActivitiesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ExportActivitiesClass::execute(): arrived" << endl;
	return insert((static_cast<Calendar *>(device))->export_activities());
}

//--------------------------------------------------------
/**
 * method : 		LoadShiftActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadShiftActivitiesClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadShiftActivitiesClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<Calendar *>(device))->load_shift_activities(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ExportShiftActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ExportShiftActivitiesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ExportShiftActivitiesClass::execute(): arrived" << endl;
	return insert((static_cast<Calendar *>(device))->export_shift_activities());
}

//--------------------------------------------------------
/**
 * method : 		LoadRangeActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadRangeActivitiesClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadRangeActivitiesClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<Calendar *>(device))->load_range_activities(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		LoadShiftRangeActivitiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadShiftRangeActivitiesClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadShiftRangeActivitiesClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<Calendar *>(device))->load_shift_range_activities(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetActivityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetActivityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetActivityClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<Calendar *>(device))->get_activity(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetShiftActivityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetShiftActivityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetShiftActivityClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<Calendar *>(device))->get_shift_activity(argin));
}

//--------------------------------------------------------
/**
 * method : 		SearchActivityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SearchActivityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SearchActivityClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<Calendar *>(device))->search_activity(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : CalendarClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum CalendarClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum CalendarClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum CalendarClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::get_class_property()
 *	Description : Read database to initialize class property data members.
 */
//--------------------------------------------------------
void CalendarClass::get_class_property()
{
	/*----- PROTECTED REGION ID(CalendarClass::get_class_property_before) ENABLED START -----*/
	
	//	Initialize class property data members
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::get_class_property_before
	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("Activities"));
	
	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract Activities value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  activities;
	else
	{
		//	Check default value for Activities
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  activities;
			cl_prop[i]  <<  activities;
		}
	}
	/*----- PROTECTED REGION ID(CalendarClass::get_class_property_after) ENABLED START -----*/
	
	//	Check class property data members init
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::get_class_property_after

}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void CalendarClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "Activities";
	prop_desc = "Allowed activities";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default device Properties
	prop_name = "ShiftStartTimes";
	prop_desc = "Starting hour of each shift";
	prop_def  = "7\n15\n23";
	vect_data.clear();
	vect_data.push_back("7");
	vect_data.push_back("15");
	vect_data.push_back("23");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ShiftNames";
	prop_desc = "Shift names";
	prop_def  = "Morning\nLate\nNight";
	vect_data.clear();
	vect_data.push_back("Morning");
	vect_data.push_back("Late");
	vect_data.push_back("Night");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CalendarFile";
	prop_desc = "File where to store the calendar";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Activities";
	prop_desc = "Allowed activities";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void CalendarClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Calendar");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Allow to define an activity for every hour.");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void CalendarClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(CalendarClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Calendar(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Calendar *dev = static_cast<Calendar *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(CalendarClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CalendarClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void CalendarClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(CalendarClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::attribute_factory_before
	//	Attribute : activity
	activityAttrib	*activity = new activityAttrib();
	Tango::UserDefaultAttrProp	activity_prop;
	activity_prop.set_description("Actual activity");
	//	label	not set for activity
	//	unit	not set for activity
	//	standard_unit	not set for activity
	//	display_unit	not set for activity
	//	format	not set for activity
	//	max_value	not set for activity
	//	min_value	not set for activity
	//	max_alarm	not set for activity
	//	min_alarm	not set for activity
	//	max_warning	not set for activity
	//	min_warning	not set for activity
	//	delta_t	not set for activity
	//	delta_val	not set for activity
	
	activity->set_default_properties(activity_prop);
	//	Not Polled
	activity->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	activity->set_change_event(true, true);
	activity->set_archive_event(true, true);
	att_list.push_back(activity);

	//	Attribute : shift
	shiftAttrib	*shift = new shiftAttrib();
	Tango::UserDefaultAttrProp	shift_prop;
	shift_prop.set_description("Actual shift");
	//	label	not set for shift
	//	unit	not set for shift
	//	standard_unit	not set for shift
	//	display_unit	not set for shift
	//	format	not set for shift
	//	max_value	not set for shift
	//	min_value	not set for shift
	//	max_alarm	not set for shift
	//	min_alarm	not set for shift
	//	max_warning	not set for shift
	//	min_warning	not set for shift
	//	delta_t	not set for shift
	//	delta_val	not set for shift
	
	shift->set_default_properties(shift_prop);
	//	Not Polled
	shift->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	shift->set_change_event(true, true);
	shift->set_archive_event(true, true);
	att_list.push_back(shift);

	//	Attribute : time
	timeAttrib	*time = new timeAttrib();
	Tango::UserDefaultAttrProp	time_prop;
	time_prop.set_description("Actual time as YYYY-MM-DD HH");
	//	label	not set for time
	//	unit	not set for time
	//	standard_unit	not set for time
	//	display_unit	not set for time
	//	format	not set for time
	//	max_value	not set for time
	//	min_value	not set for time
	//	max_alarm	not set for time
	//	min_alarm	not set for time
	//	max_warning	not set for time
	//	min_warning	not set for time
	//	delta_t	not set for time
	//	delta_val	not set for time
	
	time->set_default_properties(time_prop);
	//	Not Polled
	time->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	time->set_change_event(true, true);
	time->set_archive_event(true, true);
	att_list.push_back(time);

	//	Attribute : hour
	hourAttrib	*hour = new hourAttrib();
	Tango::UserDefaultAttrProp	hour_prop;
	hour_prop.set_description("Actual hour");
	//	label	not set for hour
	//	unit	not set for hour
	//	standard_unit	not set for hour
	//	display_unit	not set for hour
	//	format	not set for hour
	//	max_value	not set for hour
	//	min_value	not set for hour
	//	max_alarm	not set for hour
	//	min_alarm	not set for hour
	//	max_warning	not set for hour
	//	min_warning	not set for hour
	//	delta_t	not set for hour
	//	delta_val	not set for hour
	
	hour->set_default_properties(hour_prop);
	//	Not Polled
	hour->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	hour->set_change_event(true, true);
	hour->set_archive_event(true, true);
	att_list.push_back(hour);

	//	Attribute : shiftActivity
	shiftActivityAttrib	*shiftactivity = new shiftActivityAttrib();
	Tango::UserDefaultAttrProp	shiftactivity_prop;
	shiftactivity_prop.set_description("Actual activity of this shift");
	//	label	not set for shiftActivity
	//	unit	not set for shiftActivity
	//	standard_unit	not set for shiftActivity
	//	display_unit	not set for shiftActivity
	//	format	not set for shiftActivity
	//	max_value	not set for shiftActivity
	//	min_value	not set for shiftActivity
	//	max_alarm	not set for shiftActivity
	//	min_alarm	not set for shiftActivity
	//	max_warning	not set for shiftActivity
	//	min_warning	not set for shiftActivity
	//	delta_t	not set for shiftActivity
	//	delta_val	not set for shiftActivity
	
	shiftactivity->set_default_properties(shiftactivity_prop);
	//	Not Polled
	shiftactivity->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	shiftactivity->set_change_event(true, true);
	shiftactivity->set_archive_event(true, true);
	att_list.push_back(shiftactivity);

	//	Attribute : activityNum
	activityNumAttrib	*activitynum = new activityNumAttrib();
	Tango::UserDefaultAttrProp	activitynum_prop;
	activitynum_prop.set_description("Number corresponding to activity label, -1 if unknown activity");
	//	label	not set for activityNum
	//	unit	not set for activityNum
	//	standard_unit	not set for activityNum
	//	display_unit	not set for activityNum
	//	format	not set for activityNum
	//	max_value	not set for activityNum
	//	min_value	not set for activityNum
	//	max_alarm	not set for activityNum
	//	min_alarm	not set for activityNum
	//	max_warning	not set for activityNum
	//	min_warning	not set for activityNum
	//	delta_t	not set for activityNum
	//	delta_val	not set for activityNum
	
	activitynum->set_default_properties(activitynum_prop);
	//	Not Polled
	activitynum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(activitynum);

	//	Attribute : shiftActivityNum
	shiftActivityNumAttrib	*shiftactivitynum = new shiftActivityNumAttrib();
	Tango::UserDefaultAttrProp	shiftactivitynum_prop;
	shiftactivitynum_prop.set_description("Number corresponding to activity label, -1 if unknown activity");
	//	label	not set for shiftActivityNum
	//	unit	not set for shiftActivityNum
	//	standard_unit	not set for shiftActivityNum
	//	display_unit	not set for shiftActivityNum
	//	format	not set for shiftActivityNum
	//	max_value	not set for shiftActivityNum
	//	min_value	not set for shiftActivityNum
	//	max_alarm	not set for shiftActivityNum
	//	min_alarm	not set for shiftActivityNum
	//	max_warning	not set for shiftActivityNum
	//	min_warning	not set for shiftActivityNum
	//	delta_t	not set for shiftActivityNum
	//	delta_val	not set for shiftActivityNum
	
	shiftactivitynum->set_default_properties(shiftactivitynum_prop);
	//	Not Polled
	shiftactivitynum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(shiftactivitynum);

	//	Attribute : shiftNames
	shiftNamesAttrib	*shiftnames = new shiftNamesAttrib();
	Tango::UserDefaultAttrProp	shiftnames_prop;
	shiftnames_prop.set_description("Array of shift names");
	//	label	not set for shiftNames
	//	unit	not set for shiftNames
	//	standard_unit	not set for shiftNames
	//	display_unit	not set for shiftNames
	//	format	not set for shiftNames
	//	max_value	not set for shiftNames
	//	min_value	not set for shiftNames
	//	max_alarm	not set for shiftNames
	//	min_alarm	not set for shiftNames
	//	max_warning	not set for shiftNames
	//	min_warning	not set for shiftNames
	//	delta_t	not set for shiftNames
	//	delta_val	not set for shiftNames
	
	shiftnames->set_default_properties(shiftnames_prop);
	//	Not Polled
	shiftnames->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(shiftnames);

	//	Attribute : activities
	activitiesAttrib	*activities = new activitiesAttrib();
	Tango::UserDefaultAttrProp	activities_prop;
	activities_prop.set_description("Array of possible activities");
	//	label	not set for activities
	//	unit	not set for activities
	//	standard_unit	not set for activities
	//	display_unit	not set for activities
	//	format	not set for activities
	//	max_value	not set for activities
	//	min_value	not set for activities
	//	max_alarm	not set for activities
	//	min_alarm	not set for activities
	//	max_warning	not set for activities
	//	min_warning	not set for activities
	//	delta_t	not set for activities
	//	delta_val	not set for activities
	
	activities->set_default_properties(activities_prop);
	//	Not Polled
	activities->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(activities);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(CalendarClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CalendarClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void CalendarClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(CalendarClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::pipe_factory_before
	/*----- PROTECTED REGION ID(CalendarClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CalendarClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void CalendarClass::command_factory()
{
	/*----- PROTECTED REGION ID(CalendarClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::command_factory_before


	//	Command LoadActivities
	LoadActivitiesClass	*pLoadActivitiesCmd =
		new LoadActivitiesClass("LoadActivities",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"Array of:\ntime=YYYY-MM-DD HH;activity=..",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadActivitiesCmd);

	//	Command ExportActivities
	ExportActivitiesClass	*pExportActivitiesCmd =
		new ExportActivitiesClass("ExportActivities",
			Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
			"",
			"Array of:\ntime=YYYY-MM-DD HH;activity=..",
			Tango::OPERATOR);
	command_list.push_back(pExportActivitiesCmd);

	//	Command LoadShiftActivities
	LoadShiftActivitiesClass	*pLoadShiftActivitiesCmd =
		new LoadShiftActivitiesClass("LoadShiftActivities",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"Array of:\ntime=YYYY-MM-DD shiftname;activity=..",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadShiftActivitiesCmd);

	//	Command ExportShiftActivities
	ExportShiftActivitiesClass	*pExportShiftActivitiesCmd =
		new ExportShiftActivitiesClass("ExportShiftActivities",
			Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
			"",
			"Array of:\ntime=YYYY-MM-DD shiftname;activity=..",
			Tango::OPERATOR);
	command_list.push_back(pExportShiftActivitiesCmd);

	//	Command LoadRangeActivities
	LoadRangeActivitiesClass	*pLoadRangeActivitiesCmd =
		new LoadRangeActivitiesClass("LoadRangeActivities",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Begin time, end time, activity:\nbegin_time=YYYY-MM-DD HH;end_time=YYYY-MM-DD HH;activity=..",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadRangeActivitiesCmd);

	//	Command LoadShiftRangeActivities
	LoadShiftRangeActivitiesClass	*pLoadShiftRangeActivitiesCmd =
		new LoadShiftRangeActivitiesClass("LoadShiftRangeActivities",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Begin shift, end shift, activity:\nbegin_time=YYYY-MM-DD shiftname;end_time=YYYY-MM-DD shiftname;activity=..",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadShiftRangeActivitiesCmd);

	//	Command GetActivity
	GetActivityClass	*pGetActivityCmd =
		new GetActivityClass("GetActivity",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"YYYY-MM-DD HH",
			"Activity",
			Tango::OPERATOR);
	command_list.push_back(pGetActivityCmd);

	//	Command GetShiftActivity
	GetShiftActivityClass	*pGetShiftActivityCmd =
		new GetShiftActivityClass("GetShiftActivity",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"YYYY-MM-DD shiftname",
			"Activity",
			Tango::OPERATOR);
	command_list.push_back(pGetShiftActivityCmd);

	//	Command SearchActivity
	SearchActivityClass	*pSearchActivityCmd =
		new SearchActivityClass("SearchActivity",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"Activity name",
			"YYYY-MM-DD HH",
			Tango::OPERATOR);
	command_list.push_back(pSearchActivityCmd);

	/*----- PROTECTED REGION ID(CalendarClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		CalendarClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void CalendarClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(CalendarClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		CalendarClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void CalendarClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Calendar *dev = static_cast<Calendar *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(CalendarClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CalendarClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : CalendarClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *CalendarClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(CalendarClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	CalendarClass::Additional Methods
} //	namespace
